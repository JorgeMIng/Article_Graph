<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Efficient Estimation of Word Representations in Vector Space</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013-09-07">7 Sep 2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Tomas</forename><surname>Mikolov</surname></persName>
							<email>tmikolov@google.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Google Inc</orgName>
								<address>
									<settlement>Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Kai</forename><surname>Chen</surname></persName>
							<email>kaichen@google.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Google Inc</orgName>
								<address>
									<settlement>Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Greg</forename><surname>Corrado</surname></persName>
							<email>gcorrado@google.com</email>
							<affiliation key="aff2">
								<orgName type="institution">Google Inc</orgName>
								<address>
									<settlement>Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jeffrey</forename><surname>Dean</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Google Inc</orgName>
								<address>
									<settlement>Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Efficient Estimation of Word Representations in Vector Space</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2013-09-07">7 Sep 2013</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:1301.3781v3[cs.CL]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.0-SNAPSHOT" ident="GROBID" when="2024-04-23T17:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We propose two novel model architectures for computing continuous vector representations of words from very large data sets. The quality of these representations is measured in a word similarity task, and the results are compared to the previously best performing techniques based on different types of neural networks. We observe large improvements in accuracy at much lower computational cost, i.e. it takes less than a day to learn high quality word vectors from a 1.6 billion words data set. Furthermore, we show that these vectors provide state-of-the-art performance on our test set for measuring syntactic and semantic word similarities.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Many current NLP systems and techniques treat words as atomic units -there is no notion of similarity between words, as these are represented as indices in a vocabulary. This choice has several good reasons -simplicity, robustness and the observation that simple models trained on huge amounts of data outperform complex systems trained on less data. An example is the popular N-gram model used for statistical language modeling -today, it is possible to train N-grams on virtually all available data (trillions of words <ref type="bibr" target="#b2">[3]</ref>).</p><p>However, the simple techniques are at their limits in many tasks. For example, the amount of relevant in-domain data for automatic speech recognition is limited -the performance is usually dominated by the size of high quality transcribed speech data (often just millions of words). In machine translation, the existing corpora for many languages contain only a few billions of words or less. Thus, there are situations where simple scaling up of the basic techniques will not result in any significant progress, and we have to focus on more advanced techniques.</p><p>With progress of machine learning techniques in recent years, it has become possible to train more complex models on much larger data set, and they typically outperform the simple models. Probably the most successful concept is to use distributed representations of words <ref type="bibr" target="#b9">[10]</ref>. For example, neural network based language models significantly outperform N-gram models <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b16">17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Goals of the Paper</head><p>The main goal of this paper is to introduce techniques that can be used for learning high-quality word vectors from huge data sets with billions of words, and with millions of words in the vocabulary. As far as we know, none of the previously proposed architectures has been successfully trained on more than a few hundred of millions of words, with a modest dimensionality of the word vectors between 50 -100.</p><p>We use recently proposed techniques for measuring the quality of the resulting vector representations, with the expectation that not only will similar words tend to be close to each other, but that words can have multiple degrees of similarity <ref type="bibr" target="#b19">[20]</ref>. This has been observed earlier in the context of inflectional languages -for example, nouns can have multiple word endings, and if we search for similar words in a subspace of the original vector space, it is possible to find words that have similar endings <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>. Somewhat surprisingly, it was found that similarity of word representations goes beyond simple syntactic regularities. Using a word offset technique where simple algebraic operations are performed on the word vectors, it was shown for example that vector("King") -vector("Man") + vector("Woman") results in a vector that is closest to the vector representation of the word Queen <ref type="bibr" target="#b19">[20]</ref>.</p><p>In this paper, we try to maximize accuracy of these vector operations by developing new model architectures that preserve the linear regularities among words. We design a new comprehensive test set for measuring both syntactic and semantic regularities <ref type="bibr" target="#b0">1</ref> , and show that many such regularities can be learned with high accuracy. Moreover, we discuss how training time and accuracy depends on the dimensionality of the word vectors and on the amount of the training data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Previous Work</head><p>Representation of words as continuous vectors has a long history <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b7">8]</ref>. A very popular model architecture for estimating neural network language model (NNLM) was proposed in <ref type="bibr" target="#b0">[1]</ref>, where a feedforward neural network with a linear projection layer and a non-linear hidden layer was used to learn jointly the word vector representation and a statistical language model. This work has been followed by many others.</p><p>Another interesting architecture of NNLM was presented in <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>, where the word vectors are first learned using neural network with a single hidden layer. The word vectors are then used to train the NNLM. Thus, the word vectors are learned even without constructing the full NNLM. In this work, we directly extend this architecture, and focus just on the first step where the word vectors are learned using a simple model.</p><p>It was later shown that the word vectors can be used to significantly improve and simplify many NLP applications <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b28">29]</ref>. Estimation of the word vectors itself was performed using different model architectures and trained on various corpora <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b8">9]</ref>, and some of the resulting word vectors were made available for future research and comparison 2 . However, as far as we know, these architectures were significantly more computationally expensive for training than the one proposed in <ref type="bibr" target="#b12">[13]</ref>, with the exception of certain version of log-bilinear model where diagonal weight matrices are used <ref type="bibr" target="#b22">[23]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Model Architectures</head><p>Many different types of models were proposed for estimating continuous representations of words, including the well-known Latent Semantic Analysis (LSA) and Latent Dirichlet Allocation (LDA). In this paper, we focus on distributed representations of words learned by neural networks, as it was previously shown that they perform significantly better than LSA for preserving linear regularities among words <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b30">31]</ref>; LDA moreover becomes computationally very expensive on large data sets.</p><p>Similar to <ref type="bibr" target="#b17">[18]</ref>, to compare different model architectures we define first the computational complexity of a model as the number of parameters that need to be accessed to fully train the model. Next, we will try to maximize the accuracy, while minimizing the computational complexity.</p><p>For all the following models, the training complexity is proportional to</p><formula xml:id="formula_0">O = E × T × Q,<label>(1)</label></formula><p>where E is number of the training epochs, T is the number of the words in the training set and Q is defined further for each model architecture. Common choice is E = 3 − 50 and T up to one billion. All models are trained using stochastic gradient descent and backpropagation <ref type="bibr" target="#b25">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Feedforward Neural Net Language Model (NNLM)</head><p>The probabilistic feedforward neural network language model has been proposed in <ref type="bibr" target="#b0">[1]</ref>. It consists of input, projection, hidden and output layers. At the input layer, N previous words are encoded using 1-of-V coding, where V is size of the vocabulary. The input layer is then projected to a projection layer P that has dimensionality N × D, using a shared projection matrix. As only N inputs are active at any given time, composition of the projection layer is a relatively cheap operation.</p><p>The NNLM architecture becomes complex for computation between the projection and the hidden layer, as values in the projection layer are dense. For a common choice of N = 10, the size of the projection layer (P ) might be 500 to 2000, while the hidden layer size H is typically 500 to 1000 units. Moreover, the hidden layer is used to compute probability distribution over all the words in the vocabulary, resulting in an output layer with dimensionality V . Thus, the computational complexity per each training example is</p><formula xml:id="formula_1">Q = N × D + N × D × H + H × V,<label>(2)</label></formula><p>where the dominating term is H × V . However, several practical solutions were proposed for avoiding it; either using hierarchical versions of the softmax <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b17">18]</ref>, or avoiding normalized models completely by using models that are not normalized during training <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b8">9]</ref>. With binary tree representations of the vocabulary, the number of output units that need to be evaluated can go down to around log 2 (V ). Thus, most of the complexity is caused by the term N × D × H.</p><p>In our models, we use hierarchical softmax where the vocabulary is represented as a Huffman binary tree. This follows previous observations that the frequency of words works well for obtaining classes in neural net language models <ref type="bibr" target="#b15">[16]</ref>. Huffman trees assign short binary codes to frequent words, and this further reduces the number of output units that need to be evaluated: while balanced binary tree would require log 2 (V ) outputs to be evaluated, the Huffman tree based hierarchical softmax requires only about log 2 (U nigram perplexity(V )). For example when the vocabulary size is one million words, this results in about two times speedup in evaluation. While this is not crucial speedup for neural network LMs as the computational bottleneck is in the N ×D ×H term, we will later propose architectures that do not have hidden layers and thus depend heavily on the efficiency of the softmax normalization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Recurrent Neural Net Language Model (RNNLM)</head><p>Recurrent neural network based language model has been proposed to overcome certain limitations of the feedforward NNLM, such as the need to specify the context length (the order of the model N ), and because theoretically RNNs can efficiently represent more complex patterns than the shallow neural networks <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b1">2]</ref>. The RNN model does not have a projection layer; only input, hidden and output layer. What is special for this type of model is the recurrent matrix that connects hidden layer to itself, using time-delayed connections. This allows the recurrent model to form some kind of short term memory, as information from the past can be represented by the hidden layer state that gets updated based on the current input and the state of the hidden layer in the previous time step.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The complexity per training example of the RNN model is</head><formula xml:id="formula_2">Q = H × H + H × V,<label>(3)</label></formula><p>where the word representations D have the same dimensionality as the hidden layer H. Again, the term H × V can be efficiently reduced to H × log 2 (V ) by using hierarchical softmax. Most of the complexity then comes from H × H.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Parallel Training of Neural Networks</head><p>To train models on huge data sets, we have implemented several models on top of a large-scale distributed framework called DistBelief <ref type="bibr" target="#b5">[6]</ref>, including the feedforward NNLM and the new models proposed in this paper. The framework allows us to run multiple replicas of the same model in parallel, and each replica synchronizes its gradient updates through a centralized server that keeps all the parameters. For this parallel training, we use mini-batch asynchronous gradient descent with an adaptive learning rate procedure called Adagrad <ref type="bibr" target="#b6">[7]</ref>. Under this framework, it is common to use one hundred or more model replicas, each using many CPU cores at different machines in a data center.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">New Log-linear Models</head><p>In this section, we propose two new model architectures for learning distributed representations of words that try to minimize computational complexity. The main observation from the previous section was that most of the complexity is caused by the non-linear hidden layer in the model. While this is what makes neural networks so attractive, we decided to explore simpler models that might not be able to represent the data as precisely as neural networks, but can possibly be trained on much more data efficiently.</p><p>The new architectures directly follow those proposed in our earlier work <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>, where it was found that neural network language model can be successfully trained in two steps: first, continuous word vectors are learned using simple model, and then the N-gram NNLM is trained on top of these distributed representations of words. While there has been later substantial amount of work that focuses on learning word vectors, we consider the approach proposed in <ref type="bibr" target="#b12">[13]</ref> to be the simplest one.</p><p>Note that related models have been proposed also much earlier <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b7">8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Continuous Bag-of-Words Model</head><p>The first proposed architecture is similar to the feedforward NNLM, where the non-linear hidden layer is removed and the projection layer is shared for all words (not just the projection matrix); thus, all words get projected into the same position (their vectors are averaged). We call this architecture a bag-of-words model as the order of words in the history does not influence the projection. Furthermore, we also use words from the future; we have obtained the best performance on the task introduced in the next section by building a log-linear classifier with four future and four history words at the input, where the training criterion is to correctly classify the current (middle) word.</p><p>Training complexity is then</p><formula xml:id="formula_3">Q = N × D + D × log 2 (V ).<label>(4)</label></formula><p>We denote this model further as CBOW, as unlike standard bag-of-words model, it uses continuous distributed representation of the context. The model architecture is shown at Figure <ref type="figure">1</ref>. Note that the weight matrix between the input and the projection layer is shared for all word positions in the same way as in the NNLM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Continuous Skip-gram Model</head><p>The second architecture is similar to CBOW, but instead of predicting the current word based on the context, it tries to maximize classification of a word based on another word in the same sentence. More precisely, we use each current word as an input to a log-linear classifier with continuous projection layer, and predict words within a certain range before and after the current word. We found that increasing the range improves quality of the resulting word vectors, but it also increases the computational complexity. Since the more distant words are usually less related to the current word than those close to it, we give less weight to the distant words by sampling less from those words in our training examples.</p><p>The training complexity of this architecture is proportional to</p><formula xml:id="formula_4">Q = C × (D + D × log 2 (V )), (<label>5</label></formula><formula xml:id="formula_5">)</formula><p>where C is the maximum distance of the words. Thus, if we choose C = 5, for each training word we will select randomly a number R in range &lt; 1; C &gt;, and then use R words from history and</p><formula xml:id="formula_6">w(t-2) w(t+1) w(t-1) w(t+2) w(t) SUM INPUT PROJECTION OUTPUT w(t) INPUT PROJECTION OUTPUT w(t-2) w(t-1) w(t+1) w(t+2)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CBOW</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Skip-gram</head><p>Figure <ref type="figure">1</ref>: New model architectures. The CBOW architecture predicts the current word based on the context, and the Skip-gram predicts surrounding words given the current word.</p><p>R words from the future of the current word as correct labels. This will require us to do R × 2 word classifications, with the current word as input, and each of the R + R words as output. In the following experiments, we use C = 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>To compare the quality of different versions of word vectors, previous papers typically use a table</p><p>showing example words and their most similar words, and understand them intuitively. Although it is easy to show that word France is similar to Italy and perhaps some other countries, it is much more challenging when subjecting those vectors in a more complex similarity task, as follows. We follow previous observation that there can be many different types of similarities between words, for example, word big is similar to bigger in the same sense that small is similar to smaller. Example of another type of relationship can be word pairs big -biggest and small -smallest <ref type="bibr" target="#b19">[20]</ref>. We further denote two pairs of words with the same relationship as a question, as we can ask: "What is the word that is similar to small in the same sense as biggest is similar to big?"</p><p>Somewhat surprisingly, these questions can be answered by performing simple algebraic operations with the vector representation of words. To find a word that is similar to small in the same sense as biggest is similar to big, we can simply compute vector X = vector("biggest") − vector("big") + vector("small"). Then, we search in the vector space for the word closest to X measured by cosine distance, and use it as the answer to the question (we discard the input question words during this search). When the word vectors are well trained, it is possible to find the correct answer (word smallest) using this method.</p><p>Finally, we found that when we train high dimensional word vectors on a large amount of data, the resulting vectors can be used to answer very subtle semantic relationships between words, such as a city and the country it belongs to, e.g. France is to Paris as Germany is to Berlin. Word vectors with such semantic relationships could be used to improve many existing NLP applications, such as machine translation, information retrieval and question answering systems, and may enable other future applications yet to be invented. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Task Description</head><p>To measure quality of the word vectors, we define a comprehensive test set that contains five types of semantic questions, and nine types of syntactic questions. Two examples from each category are shown in Table <ref type="table" target="#tab_0">1</ref>. Overall, there are 8869 semantic and 10675 syntactic questions. The questions in each category were created in two steps: first, a list of similar word pairs was created manually.</p><p>Then, a large list of questions is formed by connecting two word pairs. For example, we made a list of 68 large American cities and the states they belong to, and formed about 2.5K questions by picking two word pairs at random. We have included in our test set only single token words, thus multi-word entities are not present (such as New York).</p><p>We evaluate the overall accuracy for all question types, and for each question type separately (semantic, syntactic). Question is assumed to be correctly answered only if the closest word to the vector computed using the above method is exactly the same as the correct word in the question; synonyms are thus counted as mistakes. This also means that reaching 100% accuracy is likely to be impossible, as the current models do not have any input information about word morphology. However, we believe that usefulness of the word vectors for certain applications should be positively correlated with this accuracy metric. Further progress can be achieved by incorporating information about structure of words, especially for the syntactic questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Maximization of Accuracy</head><p>We have used a Google News corpus for training the word vectors. This corpus contains about 6B tokens. We have restricted the vocabulary size to 1 million most frequent words. Clearly, we are facing time constrained optimization problem, as it can be expected that both using more data and higher dimensional word vectors will improve the accuracy. To estimate the best choice of model architecture for obtaining as good as possible results quickly, we have first evaluated models trained on subsets of the training data, with vocabulary restricted to the most frequent 30k words.</p><p>The results using the CBOW architecture with different choice of word vector dimensionality and increasing amount of the training data are shown in Table <ref type="table">2</ref>.</p><p>It can be seen that after some point, adding more dimensions or adding more training data provides diminishing improvements. So, we have to increase both vector dimensionality and the amount of the training data together. While this observation might seem trivial, it must be noted that it is currently popular to train word vectors on relatively large amounts of data, but with insufficient size (such as 50 -100). Given Equation <ref type="formula" target="#formula_3">4</ref>, increasing amount of training data twice results in about the same increase of computational complexity as increasing vector size twice.</p><p>For the experiments reported in Tables <ref type="table" target="#tab_2">2 and 4</ref>, we used three training epochs with stochastic gradient descent and backpropagation. We chose starting learning rate 0.025 and decreased it linearly, so that it approaches zero at the end of the last training epoch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Comparison of Model Architectures</head><p>First we compare different model architectures for deriving the word vectors using the same training data and using the same dimensionality of 640 of the word vectors. In the further experiments, we use full set of questions in the new Semantic-Syntactic Word Relationship test set, i.e. unrestricted to the 30k vocabulary. We also include results on a test set introduced in <ref type="bibr" target="#b19">[20]</ref> that focuses on syntactic similarity between words 3 .</p><p>The training data consists of several LDC corpora and is described in detail in <ref type="bibr" target="#b17">[18]</ref> (320M words, 82K vocabulary). We used these data to provide a comparison to a previously trained recurrent neural network language model that took about 8 weeks to train on a single CPU. We trained a feedforward NNLM with the same number of 640 hidden units using the DistBelief parallel training <ref type="bibr" target="#b5">[6]</ref>, using a history of 8 previous words (thus, the NNLM has more parameters than the RNNLM, as the projection layer has size 640 × 8).</p><p>In Table <ref type="table">3</ref>, it can be seen that the word vectors from the RNN (as used in <ref type="bibr" target="#b19">[20]</ref>) perform well mostly on the syntactic questions. The NNLM vectors perform significantly better than the RNN -this is not surprising, as the word vectors in the RNNLM are directly connected to a non-linear hidden layer. The CBOW architecture works better than the NNLM on the syntactic tasks, and about the same on the semantic one. Finally, the Skip-gram architecture works slightly worse on the syntactic task than the CBOW model (but still better than the NNLM), and much better on the semantic part of the test than all the other models.</p><p>Next, we evaluated our models trained using one CPU only and compared the results against publicly available word vectors. The comparison is given in Table <ref type="table" target="#tab_2">4</ref>. The CBOW model was trained on subset  For experiments reported further, we used just one training epoch (again, we decrease the learning rate linearly so that it approaches zero at the end of training). Training a model on twice as much data using one epoch gives comparable or better results than iterating over the same data for three epochs, as is shown in Table <ref type="table" target="#tab_3">5</ref>, and provides additional small speedup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Large Scale Parallel Training of Models</head><p>As mentioned earlier, we have implemented various models in a distributed framework called Dis-tBelief. Below we report the results of several models trained on the Google News 6B data set, with mini-batch asynchronous gradient descent and the adaptive learning rate procedure called Adagrad <ref type="bibr" target="#b6">[7]</ref>. We used 50 to 100 model replicas during the training. The number of CPU cores is an  <ref type="bibr" target="#b31">[32]</ref> 39 Average LSA similarity <ref type="bibr" target="#b31">[32]</ref> 49 Log-bilinear model <ref type="bibr" target="#b23">[24]</ref> 54.8 RNNLMs <ref type="bibr" target="#b18">[19]</ref> 55.4 Skip-gram 48.0 Skip-gram + RNNLMs 58.9</p><p>estimate since the data center machines are shared with other production tasks, and the usage can fluctuate quite a bit. Note that due to the overhead of the distributed framework, the CPU usage of the CBOW model and the Skip-gram model are much closer to each other than their single-machine implementations. The result are reported in Table <ref type="table">6</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Microsoft Research Sentence Completion Challenge</head><p>The Microsoft Sentence Completion Challenge has been recently introduced as a task for advancing language modeling and other NLP techniques <ref type="bibr" target="#b31">[32]</ref>. This task consists of 1040 sentences, where one word is missing in each sentence and the goal is to select word that is the most coherent with the rest of the sentence, given a list of five reasonable choices. Performance of several techniques has been already reported on this set, including N-gram models, LSA-based model <ref type="bibr" target="#b31">[32]</ref>, log-bilinear model <ref type="bibr" target="#b23">[24]</ref> and a combination of recurrent neural networks that currently holds the state of the art performance of 55.4% accuracy on this benchmark <ref type="bibr" target="#b18">[19]</ref>.</p><p>We have explored the performance of Skip-gram architecture on this task. First, we train the 640dimensional model on 50M words provided in <ref type="bibr" target="#b31">[32]</ref>. Then, we compute score of each sentence in the test set by using the unknown word at the input, and predict all surrounding words in a sentence. The final sentence score is then the sum of these individual predictions. Using the sentence scores, we choose the most likely sentence.</p><p>A short summary of some previous results together with the new results is presented in Table <ref type="table">7</ref>.</p><p>While the Skip-gram model itself does not perform on this task better than LSA similarity, the scores from this model are complementary to scores obtained with RNNLMs, and a weighted combination leads to a new state of the art result 58.9% accuracy (59.2% on the development part of the set and 58.7% on the test part of the set).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Examples of the Learned Relationships</head><p>Table <ref type="table" target="#tab_5">8</ref> shows words that follow various relationships. We follow the approach described above: the relationship is defined by subtracting two word vectors, and the result is added to another word. Thus for example, Paris -France + Italy = Rome. As it can be seen, accuracy is quite good, although there is clearly a lot of room for further improvements (note that using our accuracy metric that  <ref type="table" target="#tab_5">8</ref> would score only about 60%). We believe that word vectors trained on even larger data sets with larger dimensionality will perform significantly better, and will enable the development of new innovative applications. Another way to improve accuracy is to provide more than one example of the relationship. By using ten examples instead of one to form the relationship vector (we average the individual vectors together), we have observed improvement of accuracy of our best models by about 10% absolutely on the semantic-syntactic test.</p><p>It is also possible to apply the vector operations to solve different tasks. For example, we have observed good accuracy for selecting out-of-the-list words, by computing average vector for a list of words, and finding the most distant word vector. This is a popular type of problems in certain human intelligence tests. Clearly, there is still a lot of discoveries to be made using these techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper we studied the quality of vector representations of words derived by various models on a collection of syntactic and semantic language tasks. We observed that it is possible to train high quality word vectors using very simple model architectures, compared to the popular neural network models (both feedforward and recurrent). Because of the much lower computational complexity, it is possible to compute very accurate high dimensional word vectors from a much larger data set.</p><p>Using the DistBelief distributed framework, it should be possible to train the CBOW and Skip-gram models even on corpora with one trillion words, for basically unlimited size of the vocabulary. That is several orders of magnitude larger than the best previously published results for similar models.</p><p>An interesting task where the word vectors have recently been shown to significantly outperform the previous state of the art is the SemEval-2012 Task 2 <ref type="bibr" target="#b10">[11]</ref>. The publicly available RNN vectors were used together with other techniques to achieve over 50% increase in Spearman's rank correlation over the previous best result <ref type="bibr" target="#b30">[31]</ref>. The neural network based word vectors were previously applied to many other NLP tasks, for example sentiment analysis <ref type="bibr" target="#b11">[12]</ref> and paraphrase detection <ref type="bibr" target="#b27">[28]</ref>. It can be expected that these applications can benefit from the model architectures described in this paper.</p><p>Our ongoing work shows that the word vectors can be successfully applied to automatic extension of facts in Knowledge Bases, and also for verification of correctness of existing facts. Results from machine translation experiments also look very promising. In the future, it would be also interesting to compare our techniques to Latent Relational Analysis <ref type="bibr" target="#b29">[30]</ref> and others. We believe that our comprehensive test set will help the research community to improve the existing techniques for estimating the word vectors. We also expect that high quality word vectors will become an important building block for future NLP applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Follow-Up Work</head><p>After the initial version of this paper was written, we published single-machine multi-threaded C++ code for computing the word vectors, using both the continuous bag-of-words and skip-gram architectures <ref type="bibr" target="#b3">4</ref> . The training speed is significantly higher than reported earlier in this paper, i.e. it is in the order of billions of words per hour for typical hyperparameter choices. We also published more than 1.4 million vectors that represent named entities, trained on more than 100 billion words. Some of our follow-up work will be published in an upcoming NIPS 2013 paper <ref type="bibr" target="#b20">[21]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Examples of five types of semantic and nine types of syntactic questions in the Semantic-Syntactic Word Relationship test set.</figDesc><table><row><cell>Type of relationship</cell><cell cols="2">Word Pair 1</cell><cell cols="2">Word Pair 2</cell></row><row><cell>Common capital city</cell><cell>Athens</cell><cell>Greece</cell><cell>Oslo</cell><cell>Norway</cell></row><row><cell>All capital cities</cell><cell>Astana</cell><cell>Kazakhstan</cell><cell>Harare</cell><cell>Zimbabwe</cell></row><row><cell>Currency</cell><cell>Angola</cell><cell>kwanza</cell><cell>Iran</cell><cell>rial</cell></row><row><cell>City-in-state</cell><cell>Chicago</cell><cell>Illinois</cell><cell>Stockton</cell><cell>California</cell></row><row><cell>Man-Woman</cell><cell>brother</cell><cell>sister</cell><cell cols="2">grandson granddaughter</cell></row><row><cell>Adjective to adverb</cell><cell>apparent</cell><cell>apparently</cell><cell>rapid</cell><cell>rapidly</cell></row><row><cell>Opposite</cell><cell>possibly</cell><cell>impossibly</cell><cell>ethical</cell><cell>unethical</cell></row><row><cell>Comparative</cell><cell>great</cell><cell>greater</cell><cell>tough</cell><cell>tougher</cell></row><row><cell>Superlative</cell><cell>easy</cell><cell>easiest</cell><cell>lucky</cell><cell>luckiest</cell></row><row><cell>Present Participle</cell><cell>think</cell><cell>thinking</cell><cell>read</cell><cell>reading</cell></row><row><cell cols="2">Nationality adjective Switzerland</cell><cell>Swiss</cell><cell>Cambodia</cell><cell>Cambodian</cell></row><row><cell>Past tense</cell><cell>walking</cell><cell>walked</cell><cell>swimming</cell><cell>swam</cell></row><row><cell>Plural nouns</cell><cell>mouse</cell><cell>mice</cell><cell>dollar</cell><cell>dollars</cell></row><row><cell>Plural verbs</cell><cell>work</cell><cell>works</cell><cell>speak</cell><cell>speaks</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :Table 3 :</head><label>23</label><figDesc>Accuracy on subset of the Semantic-Syntactic Word Relationship test set, using word vectors from the CBOW architecture with limited vocabulary. Only questions containing words from the most frequent 30k words are used. Comparison of architectures using models trained on the same data, with 640-dimensional word vectors. The accuracies are reported on our Semantic-Syntactic Word Relationship test set, and on the syntactic relationship test set of<ref type="bibr" target="#b19">[20]</ref> </figDesc><table><row><cell cols="6">Dimensionality / Training words 24M 49M 98M 196M 391M 783M</cell></row><row><cell></cell><cell>50</cell><cell>13.4 15.7 18.6</cell><cell>19.1</cell><cell>22.5</cell><cell>23.2</cell></row><row><cell></cell><cell>100</cell><cell>19.4 23.1 27.8</cell><cell>28.7</cell><cell>33.4</cell><cell>32.2</cell></row><row><cell></cell><cell>300</cell><cell>23.2 29.2 35.3</cell><cell>38.6</cell><cell>43.7</cell><cell>45.9</cell></row><row><cell></cell><cell>600</cell><cell>24.0 30.1 36.5</cell><cell>40.8</cell><cell>46.6</cell><cell>50.4</cell></row><row><cell>Model</cell><cell cols="2">Semantic-Syntactic Word Relationship test set</cell><cell></cell><cell cols="2">MSR Word Relatedness</cell></row><row><cell cols="4">Architecture Semantic Accuracy [%] Syntactic Accuracy [%]</cell><cell cols="2">Test Set [20]</cell></row><row><cell>RNNLM</cell><cell>9</cell><cell>36</cell><cell></cell><cell>35</cell></row><row><cell>NNLM</cell><cell>23</cell><cell>53</cell><cell></cell><cell>47</cell></row><row><cell>CBOW</cell><cell>24</cell><cell>64</cell><cell></cell><cell>61</cell></row><row><cell>Skip-gram</cell><cell>55</cell><cell>59</cell><cell></cell><cell>56</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 4 :</head><label>4</label><figDesc>Comparison of publicly available word vectors on the Semantic-Syntactic Word Relationship test set, and word vectors from our models. Full vocabularies are used.</figDesc><table><row><cell>Model</cell><cell>Vector</cell><cell>Training</cell><cell></cell><cell>Accuracy [%]</cell><cell></cell></row><row><cell></cell><cell>Dimensionality</cell><cell>words</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">Semantic Syntactic Total</cell></row><row><cell>Collobert-Weston NNLM</cell><cell>50</cell><cell>660M</cell><cell>9.3</cell><cell>12.3</cell><cell>11.0</cell></row><row><cell>Turian NNLM</cell><cell>50</cell><cell>37M</cell><cell>1.4</cell><cell>2.6</cell><cell>2.1</cell></row><row><cell>Turian NNLM</cell><cell>200</cell><cell>37M</cell><cell>1.4</cell><cell>2.2</cell><cell>1.8</cell></row><row><cell>Mnih NNLM</cell><cell>50</cell><cell>37M</cell><cell>1.8</cell><cell>9.1</cell><cell>5.8</cell></row><row><cell>Mnih NNLM</cell><cell>100</cell><cell>37M</cell><cell>3.3</cell><cell>13.2</cell><cell>8.8</cell></row><row><cell>Mikolov RNNLM</cell><cell>80</cell><cell>320M</cell><cell>4.9</cell><cell>18.4</cell><cell>12.7</cell></row><row><cell>Mikolov RNNLM</cell><cell>640</cell><cell>320M</cell><cell>8.6</cell><cell>36.5</cell><cell>24.6</cell></row><row><cell>Huang NNLM</cell><cell>50</cell><cell>990M</cell><cell>13.3</cell><cell>11.6</cell><cell>12.3</cell></row><row><cell>Our NNLM</cell><cell>20</cell><cell>6B</cell><cell>12.9</cell><cell>26.4</cell><cell>20.3</cell></row><row><cell>Our NNLM</cell><cell>50</cell><cell>6B</cell><cell>27.9</cell><cell>55.8</cell><cell>43.2</cell></row><row><cell>Our NNLM</cell><cell>100</cell><cell>6B</cell><cell>34.2</cell><cell>64.5</cell><cell>50.8</cell></row><row><cell>CBOW</cell><cell>300</cell><cell>783M</cell><cell>15.5</cell><cell>53.1</cell><cell>36.1</cell></row><row><cell>Skip-gram</cell><cell>300</cell><cell>783M</cell><cell>50.0</cell><cell>55.9</cell><cell>53.3</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 5 :</head><label>5</label><figDesc>Comparison of models trained for three epochs on the same data and models trained for one epoch. Accuracy is reported on the full Semantic-Syntactic data set.</figDesc><table><row><cell>Model</cell><cell>Vector</cell><cell>Training</cell><cell></cell><cell>Accuracy [%]</cell><cell></cell><cell>Training time</cell></row><row><cell></cell><cell>Dimensionality</cell><cell>words</cell><cell></cell><cell></cell><cell></cell><cell>[days]</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">Semantic Syntactic Total</cell><cell></cell></row><row><cell>3 epoch CBOW</cell><cell>300</cell><cell>783M</cell><cell>15.5</cell><cell>53.1</cell><cell>36.1</cell><cell>1</cell></row><row><cell>3 epoch Skip-gram</cell><cell>300</cell><cell>783M</cell><cell>50.0</cell><cell>55.9</cell><cell>53.3</cell><cell>3</cell></row><row><cell>1 epoch CBOW</cell><cell>300</cell><cell>783M</cell><cell>13.8</cell><cell>49.9</cell><cell>33.6</cell><cell>0.3</cell></row><row><cell>1 epoch CBOW</cell><cell>300</cell><cell>1.6B</cell><cell>16.1</cell><cell>52.6</cell><cell>36.1</cell><cell>0.6</cell></row><row><cell>1 epoch CBOW</cell><cell>600</cell><cell>783M</cell><cell>15.4</cell><cell>53.3</cell><cell>36.2</cell><cell>0.7</cell></row><row><cell>1 epoch Skip-gram</cell><cell>300</cell><cell>783M</cell><cell>45.6</cell><cell>52.2</cell><cell>49.2</cell><cell>1</cell></row><row><cell>1 epoch Skip-gram</cell><cell>300</cell><cell>1.6B</cell><cell>52.2</cell><cell>55.1</cell><cell>53.8</cell><cell>2</cell></row><row><cell>1 epoch Skip-gram</cell><cell>600</cell><cell>783M</cell><cell>56.7</cell><cell>54.5</cell><cell>55.5</cell><cell>2.5</cell></row><row><cell cols="7">of the Google News data in about a day, while training time for the Skip-gram model was about three</cell></row><row><cell>days.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 6 :Table 7 :</head><label>67</label><figDesc>Comparison of models trained using the DistBelief distributed framework. Note that training of NNLM with 1000-dimensional vectors would take too long to complete. Comparison and combination of models on the Microsoft Sentence Completion Challenge.</figDesc><table><row><cell>Model</cell><cell>Vector</cell><cell>Training</cell><cell></cell><cell>Accuracy [%]</cell><cell></cell><cell>Training time</cell></row><row><cell></cell><cell>Dimensionality</cell><cell>words</cell><cell></cell><cell></cell><cell></cell><cell>[days x CPU cores]</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">Semantic Syntactic Total</cell><cell></cell></row><row><cell>NNLM</cell><cell>100</cell><cell>6B</cell><cell>34.2</cell><cell>64.5</cell><cell>50.8</cell><cell>14 x 180</cell></row><row><cell>CBOW</cell><cell>1000</cell><cell>6B</cell><cell>57.3</cell><cell>68.9</cell><cell>63.7</cell><cell>2 x 140</cell></row><row><cell>Skip-gram</cell><cell>1000</cell><cell>6B</cell><cell>66.1</cell><cell>65.1</cell><cell>65.6</cell><cell>2.5 x 125</cell></row><row><cell></cell><cell cols="2">Architecture</cell><cell></cell><cell cols="2">Accuracy [%]</cell><cell></cell></row><row><cell></cell><cell cols="2">4-gram</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 8 :</head><label>8</label><figDesc>Examples of the word pair relationships, using the best word vectors from Table4(Skipgram model trained on 783M words with 300 dimensionality).</figDesc><table><row><cell>Relationship</cell><cell>Example 1</cell><cell>Example 2</cell><cell>Example 3</cell></row><row><cell>France -Paris</cell><cell>Italy: Rome</cell><cell>Japan: Tokyo</cell><cell>Florida: Tallahassee</cell></row><row><cell>big -bigger</cell><cell>small: larger</cell><cell>cold: colder</cell><cell>quick: quicker</cell></row><row><cell>Miami -Florida</cell><cell>Baltimore: Maryland</cell><cell>Dallas: Texas</cell><cell>Kona: Hawaii</cell></row><row><cell>Einstein -scientist</cell><cell>Messi: midfielder</cell><cell>Mozart: violinist</cell><cell>Picasso: painter</cell></row><row><cell>Sarkozy -France</cell><cell>Berlusconi: Italy</cell><cell>Merkel: Germany</cell><cell>Koizumi: Japan</cell></row><row><cell>copper -Cu</cell><cell>zinc: Zn</cell><cell>gold: Au</cell><cell>uranium: plutonium</cell></row><row><cell>Berlusconi -Silvio</cell><cell>Sarkozy: Nicolas</cell><cell>Putin: Medvedev</cell><cell>Obama: Barack</cell></row><row><cell>Microsoft -Windows</cell><cell>Google: Android</cell><cell>IBM: Linux</cell><cell>Apple: iPhone</cell></row><row><cell>Microsoft -Ballmer</cell><cell>Google: Yahoo</cell><cell>IBM: McNealy</cell><cell>Apple: Jobs</cell></row><row><cell>Japan -sushi</cell><cell>Germany: bratwurst</cell><cell>France: tapas</cell><cell>USA: pizza</cell></row><row><cell cols="2">assumes exact match, the results in Table</cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">The test set is available at www.fit.vutbr.cz/˜imikolov/rnnlm/word-test.v1.txt 2 http://ronan.collobert.com/senna/ http://metaoptimize.com/projects/wordreprs/ http://www.fit.vutbr.cz/˜imikolov/rnnlm/ http://ai.stanford.edu/˜ehhuang/</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3">We thank Geoff Zweig for providing us the test set.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4">The code is available at https://code.google.com/p/word2vec/</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A neural probabilistic language model</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ducharme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Vincent</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1137" to="1155" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Scaling learning algorithms towards AI</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Large-Scale Kernel Machines</title>
				<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Large language models in machine translation</title>
		<author>
			<persName><forename type="first">T</forename><surname>Brants</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Popat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">J</forename><surname>Och</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Joint Conference on Empirical Methods in Natural Language Processing and Computational Language Learning</title>
				<meeting>the Joint Conference on Empirical Methods in Natural Language Processing and Computational Language Learning</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Unified Architecture for Natural Language Processing: Deep Neural Networks with Multitask Learning</title>
		<author>
			<persName><forename type="first">R</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Weston</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning, ICML</title>
				<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">R</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Karlen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kuksa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Natural Language Processing (Almost) from Scratch. Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="2493" to="2537" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">S</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Monga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Devin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">V</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Z</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Ranzato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Senior</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
		<title level="m">Large Scale Distributed Deep Networks, NIPS</title>
				<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Adaptive subgradient methods for online learning and stochastic optimization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Duchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Hazan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Finding Structure in Time</title>
		<author>
			<persName><forename type="first">J</forename><surname>Elman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cognitive Science</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="179" to="211" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Improving Word Representations via Global Context and Multiple Word Prototypes</title>
		<author>
			<persName><forename type="first">Eric</forename><forename type="middle">H</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Socher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Association for Computational Linguistics</title>
				<meeting>Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Distributed representations. In: Parallel distributed processing: Explorations in the microstructure of cognition</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Mcclelland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Rumelhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Foundations</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1986" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Semeval-2012 task 2: Measuring degrees of relational similarity</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Jurgens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Mohammad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">D</forename><surname>Turney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Holyoak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th International Workshop on Semantic Evaluation</title>
				<meeting>the 6th International Workshop on Semantic Evaluation</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Learning word vectors for sentiment analysis</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Maas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Daly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">T</forename><surname>Pham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Potts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACL</title>
				<meeting>ACL</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Language Modeling for Speech Recognition in Czech, Masters thesis, Brno University of Technology</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Neural network based language models for higly inflective languages</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kopecký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Burget</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Glembek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Černocký</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICASSP</title>
				<meeting>ICASSP</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Recurrent neural network based language model</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Karafiát</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Burget</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Černocký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khudanpur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Interspeech</title>
				<meeting>Interspeech</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Extensions of recurrent neural network language model</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kombrink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Burget</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Černocký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khudanpur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICASSP</title>
				<meeting>ICASSP</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Empirical Evaluation and Combination of Advanced Language Modeling Techniques</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Deoras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kombrink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Burget</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Černocký</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Interspeech</title>
				<meeting>Interspeech</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Strategies for Training Large Scale Neural Network Language Models</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Deoras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Povey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Burget</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Černocký</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Automatic Speech Recognition and Understanding</title>
				<meeting>Automatic Speech Recognition and Understanding</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Statistical Language Models based on Neural Networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
		<respStmt>
			<orgName>Brno University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Yih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Zweig</surname></persName>
		</author>
		<title level="m">Linguistic Regularities in Continuous Space Word Representations. NAACL HLT</title>
				<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Distributed Representations of Words and Phrases and their Compositionality</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Accepted to NIPS</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Three new graphical models for statistical language modelling. ICML</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A Scalable Hierarchical Distributed Language Model</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">21</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">A fast and simple algorithm for training neural probabilistic language models</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">W</forename><surname>Teh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
	<note type="report_type">ICML</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Hierarchical Probabilistic Neural Network Language Model</title>
		<author>
			<persName><forename type="first">F</forename><surname>Morin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>AISTATS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Learning internal representations by backpropagating errors</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Rumelhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">323</biblScope>
			<biblScope unit="page" from="533" to="536" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Continuous space language models</title>
		<author>
			<persName><forename type="first">H</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Speech and Language</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Dynamic Pooling and Unfolding Recursive Autoencoders for Paraphrase Detection</title>
		<author>
			<persName><forename type="first">R</forename><surname>Socher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pennington</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Manning</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
				<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Word Representations: A Simple and General Method for Semi-Supervised Learning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Turian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Ratinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Association for Computational Linguistics</title>
				<meeting>Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Measuring Semantic Similarity by Latent Relational Analysis</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">D</forename><surname>Turney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Joint Conference on Artificial Intelligence</title>
				<meeting>International Joint Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Combining Heterogeneous Models for Measuring Relational Similarity</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zhila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Yih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Meek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Zweig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mikolov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<publisher>NAACL HLT</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">The Microsoft Research Sentence Completion Challenge</title>
		<author>
			<persName><forename type="first">G</forename><surname>Zweig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J C</forename><surname>Burges</surname></persName>
		</author>
		<idno>MSR-TR-2011-129</idno>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note type="report_type">Microsoft Research Technical Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
